@page "/addProduct"
@inject IProductServices productServices
@inject ICategoryServices categoryServices
@inject NavigationManager navigationManager

<PageTitle>Add - Product</PageTitle>
<ModuleTitle title="Add Product"></ModuleTitle>

<button @onclick="@(()=> navigationManager.NavigateTo("/products"))">Products</button>

<EditForm Model="@product" OnSubmit="@Save">
	<div class="row">
		<div>
			<label>Title</label>
			<InputText @bind-Value="product.title" requierd></InputText>
		</div>
		<div>
			<label>Price</label>
			<InputNumber @bind-Value="product.price"></InputNumber>
		</div>
	</div>
	<div class="row">
		<div class="form-group">
			<label class="col-form-label">Image (URL)</label>
			<InputTextArea @bind-Value="product.image" class="form-control"></InputTextArea>
		</div>
		<div class="form-group">
			<label class="col-form-label">Category</label>
			<InputSelect @bind-Value="product.categoryId" class="form-control">
				<option>Select Category...</option>
				@foreach(var category in categories)
				{
					<option value="@category.id">@category.name</option>
				}
			</InputSelect>
		</div>
	</div>
	<div>
		<label class="col-form-label">Description</label>
		<InputTextArea @bind-Value="product.description" class="form-control"></InputTextArea>
	</div>
	<button type="submit">Save</button>
</EditForm>

@code {
	private Product product = new Product();
	private List<Category> categories = new List<Category>();

	protected override async Task OnInitializedAsync()
	{
		categories = await categoryServices.GetCategories();
	}

	public async Task Save()
	{
		product.images = new string[1] { product.image };
		await productServices.PostProducts(product);
		navigationManager.NavigateTo("/products");
	}
}
